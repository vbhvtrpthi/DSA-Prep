//https://nados.io/question/is-graph-bipartite?zen=true

//Time Complexity:
// We are simply doing a BFS traversal of the entire graph, which will take O(N + E) time, where N = number of vertices, and E = number of edges.

//Space Complexity:
// We are using a queue data structure for the BFS traversal, which will store at max N vertices. Hence, the space complexity is O(N).
// Please note that we are not taking into account the space taken to build the adjacency list, as it was given to us as an input.

public class Main {

    static class Edge {
        int src;
        int nbr;
        int wt;

        Edge(int src, int nbr, int wt) {
            this.src = src;
            this.nbr = nbr;
            this.wt = wt;
        }
    }

    static class Pair {
        int v;
        String psf;
        int level;

        Pair(int v, String psf, int level) {
            this.v = v;
            this.psf = psf;
            this.level = level;
        }
    }

    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        int vtces = Integer.parseInt(br.readLine());
        ArrayList<Edge>[] graph = new ArrayList[vtces];
        for (int i = 0; i < vtces; i++) {
            graph[i] = new ArrayList<>();
        }

        int edges = Integer.parseInt(br.readLine());
        for (int i = 0; i < edges; i++) {
            String[] parts = br.readLine().split(" ");
            int v1 = Integer.parseInt(parts[0]);
            int v2 = Integer.parseInt(parts[1]);
            int wt = Integer.parseInt(parts[2]);
            graph[v1].add(new Edge(v1, v2, wt));
            graph[v2].add(new Edge(v2, v1, wt));
        }

        //will store the last visited level
        int[] visited = new int[vtces];
        Arrays.fill(visited, -1); //if -1 it wasn't visited before

        for (int v = 0; v < vtces; v++) {
            if (visited[v] == -1) {
                boolean res = isGraphBipartite(graph, visited, v);
                if (res == false) {
                    System.out.println("false");
                    return;
                }
            }
        }
        System.out.println("true");
    }

    public static boolean isGraphBipartite(ArrayList<Edge>[] graph, int[] visited, int src) {
        ArrayDeque<Pair> q = new ArrayDeque<>();
        q.add(new Pair(src, src + "", 0));

        while (q.size() > 0) {
            Pair rem = q.remove();
            if (visited[rem.v] != -1) {
                if (rem.level != visited[rem.level]) {
                    return false;
                }
            }
            visited[rem.v] = rem.level;

            for (Edge e : graph[src]) {
                if (visited[e.nbr] == -1) {
                    q.add(new Pair(e.nbr, rem.psf + e.nbr, rem.level + 1));
                }
            }
        }

        return true;
    }
}
