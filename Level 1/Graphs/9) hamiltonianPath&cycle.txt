//https://www.pepcoding.com/resources/online-java-foundation/graphs/hamiltonian-official/ojquestion

//tc -> Time Complexity:
//O(V+E) because of the DFS approach.

public class Main {
    static class Edge {
        int src;
        int nbr;
        int wt;

        Edge(int src, int nbr, int wt) {
            this.src = src;
            this.nbr = nbr;
            this.wt = wt;
        }
    }
    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        int vtces = Integer.parseInt(br.readLine());
        ArrayList<Edge>[] graph = new ArrayList[vtces];
        for (int i = 0; i < vtces; i++) {
            graph[i] = new ArrayList<>();
        }

        int edges = Integer.parseInt(br.readLine());
        for (int i = 0; i < edges; i++) {
            String[] parts = br.readLine().split(" ");
            int v1 = Integer.parseInt(parts[0]);
            int v2 = Integer.parseInt(parts[1]);
            int wt = Integer.parseInt(parts[2]);
            graph[v1].add(new Edge(v1, v2, wt));
            graph[v2].add(new Edge(v2, v1, wt));
        }

        int src = Integer.parseInt(br.readLine());
        HashSet<Integer> visited = new HashSet<>();

        hamiltPathCycle(graph, visited, src, "", src);
        // write all your codes here
    }

    public static void hamiltPathCycle(ArrayList<Edge>[] graph, HashSet<Integer> visited, int src, String psf, int osrc) {

        visited.add(src);
        if (visited.size() == graph.length) {
            psf += src;
            System.out.print(psf);

            boolean closingEdgeFound = false;
            
            for (Edge e : graph[osrc]) {
                if (e.nbr == src) {
                    closingEdgeFound = true;
                    break;
                }
            }

            if (closingEdgeFound) {
                System.out.println("*");
            } else {
                System.out.print(".");
            }
        }

        for (Edge e : graph[src]) {
            if (!visited.contains(e.nbr)) {
                hamiltPathCycle(graph, visited, e.nbr, psf + e.src, osrc);
            }
        }

        visited.remove(src);
    }
}
