//Largest Area Histogram

//Algo (NSEL ,NSER)

// https://leetcode.com/problems/largest-rectangle-in-histogram/description/

import java.util.*;

public class Test {

    public static void main(String[] args) throws Exception {
        Scanner scn = new Scanner(System.in);
        // Larget area histogram
        int[] arr = { 2, 1, 5, 6, 2, 3 };
        int[] nsel = getNSEL(arr);
        int[] nser = getNSER(arr);

        int max = Integer.MIN_VALUE;
        for (int i = 0; i < arr.length; i++) {
            int width = nser[i] - nsel[i] - 1;
            int area = arr[i] * width;
            max = Math.max(max, area);
        }
        System.out.println(max);
        scn.close();

    }

    public static int[] getNSEL(int[] arr) {
        int[] nsel = new int[arr.length];
        nsel[0] = -1;
        Stack<Integer> st = new Stack<>();
        st.push(0);

        for (int i = 1; i < arr.length; i++) {
            while (st.size() > 0 && arr[st.peek()] >= arr[i]) {
                st.pop();
            }
            if (st.size() == 0) {
                nsel[i] = -1;
            } else {
                nsel[i] = st.peek();
            }
            st.push(i);
        }
        return nsel;
    }

    public static int[] getNSER(int[] arr) {
        int[] nser = new int[arr.length];
        nser[arr.length - 1] = -1;
        Stack<Integer> st = new Stack<>();
        st.push(arr.length - 1);

        for (int i = arr.length - 2; i >= 0; i--) {
            while (st.size() > 0 && arr[st.peek()] >= arr[i]) {
                st.pop();
            }
            if (st.size() == 0) {
                nser[i] = -1;
            } else {
                nser[i] = st.peek();
            }
            st.push(i);
        }
        return nser;
    }
}
//Time Complexity:
// Calculating NSE is O(n) we already know that. And to calculate the maximum area we are just doing a single loop. 
// Hence that too results in O(n).

// Space Complexity:
// We are just using stacks for calculating the NSEs but for the maximum area we are not using any auxiliary space,
//  so the space complexity will still be O(n)

//-----------------------------------------------------------------------------------------------------------------------------------------

// Sliding window maximum.
// Algo NGER
// https://leetcode.com/problems/sliding-window-maximum/description/

import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        int[] arr = { 1, 3, -1, -3, 5, 3, 6, 7 };
        int k = 3;

        // code

        // nge begin
        int[] nge = new int[arr.length];

        Stack<Integer> st = new Stack<>();
        st.push(arr.length - 1);
        nge[arr.length - 1] = arr.length;

        for (int i = arr.length - 2; i >= 0; i--) {
            while (st.size() > 0 && arr[i] >= arr[st.peek()]) {
                st.pop();
            }

            if (st.size() == 0) {
                nge[i] = arr.length;
            } else {
                nge[i] = st.peek();
            }

            st.push(i);
        }

        // nge end

        int j = 0;
        for (int i = 0; i <= arr.length - k; i++) {
            if (j < i) {
                j = i;
            }

            while (nge[j] < i + k) {
                j = nge[j];
            }
            System.out.println(arr[j]);
        }
    }
}

// Time Complexity :
// First, we are generating the NGE array of size n, which takes O(n) time and O(n) space for the NGE array and stack as auxiliary space.
// Since, we need not start from the first index of every window, thus skipping all smaller elements in the previous window,
//  and we are jumping from one element to the next greater and skipping all the smaller elements in the current window,
//   the two pointers i and j only move for at maximum n steps independently.
// Hence, the time complexity will be O(n + 2 * n) = O(3 * n) = O(n) only.

// Space Complexity:
// We require the NGE array, which accounts for the extra O(n)

// Space Complexity:
// We have not studied DEQUE data structure, but this problem can also be solved using it, in similar O(n)
//  time complexity but O(k) space complexity. Please try to come up with this solution as well, after you learn about deque.
// O(n) space and O(k) space solution does not bring any difference in the worst case, as k can be as maximum as n. 
// Though, in best case, when k = 1, the deque solution will be equivalent to constant space.

//-----------------------------------------------------------------------------------------------------------------------------------------

//Infix Evaluation

// these are algebraic expressions which humans understand
// Sample Input: 2 + (5 - 3 * 6 / 2)
// Sample Output: 2