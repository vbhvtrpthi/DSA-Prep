//get_subsequence / subset

// Sample Input
// abc

// Sample Output
// [, c, b, bc, a, ac, ab, abc]

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Scanner;

public class Main {

    public static void main(String[] args) throws Exception {
        Scanner scn = new Scanner(System.in);
        String str = scn.next(); // "a"
        ArrayList<String> res = getss(str);
        System.out.println(res);
    }

    public static ArrayList<String> getss(String str) {

        if (str.length() == 0) {
            ArrayList<String> bres = new ArrayList<>();
            bres.add("");
            return bres;
        }

        char ch = str.charAt(0);
        String ros = str.substring(1);

        ArrayList<String> rres = getss(ros);
        ArrayList<String> mres = new ArrayList<>();

        for (String val : rres) {
            mres.add("" + val);
        }
        for (String val : rres) {
            mres.add(ch + val);
        }
        return mres;
    }
}

// Time Complexity :
// O(n)

// This time complexity is linear because a recursion call is made along with
// using "for loop".

// SPACE COMPLEXITY :
// O(1)

// As no extra space is required, therefore space complexity is constant.
// However, if we include the space used in the recursive stack then the space
// complexity is O(n).

//RQ - https://leetcode.com/problems/is-subsequence/ (2 pointer & Recursion)

//-----------------------------------------------------------------------------------------------------------------------------------------------------

//get Key Pad Combination
//I/p - 578
// o.p [mtv, mtw, mtx, muv, muw, mux, ntv, ntw, ntx, nuv, nuw, nux, otv, otw, otx, ouv, ouw, oux]

import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        Scanner scn = new Scanner(System.in);
        String str = scn.next();
        ArrayList<String> words = getKPC(str);
        System.out.println(words);
        scn.close();
    }

    static String[] codes = { ".;", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tu", "vwx",
            "yz"
    }; // #

    public static ArrayList<String> getKPC(String str) {
        if (str.length() == 0) { // 1
            ArrayList<String> bres = new ArrayList<>();
            bres.add("");
            return bres;
        }

        char ch = str.charAt(0); // 2
        String ros = str.substring(1); // 3 //ros -> rest of the string
        ArrayList<String> rres = getKPC(ros); // 4 // rres- recursion result
        ArrayList<String> mres = new ArrayList<>(); //mres - my recursion result

        String codeforch = codes[ch - '0']; // 5

        for (int i = 0; i < codeforch.length(); i++) {
            char chcode = codeforch.charAt(i);
            for (String val : rres) { // 6
                mres.add(chcode + val);
            }
        }
        return mres; // 7
    }
}

// Time Complexity :
// O(n)

// This time complexity is linear because a recursion call is made along with using "for loop".

// SPACE COMPLEXITY :
// O(1)

// As no extra space is required, therefore space complexity is constant. 
//However, if we include the space used in the recursive stack then the space complexity is O(n).

//RQ - https://leetcode.com/problems/letter-combinations-of-a-phone-number/description/

//-----------------------------------------------------------------------------------------------------------------------------------------------------

//Get Stair Paths

//A person is standing on the nth/0th floor of a staircase and wants to come to the 0th/nth got to the top floor.

// At a time he can go 1, 2 or 3 steps down/up.
// You have to print all the paths that can be used to climb down/up the staircase.
// For example, if n=3, then all the paths are 111, 12, 21, 3.

import java.io.*;

import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        Scanner scn = new Scanner(System.in);
        int n = 3;
        ArrayList<String> paths = getStairPaths(n);
        System.out.println(paths);
        scn.close();
    }

    public static ArrayList<String> getStairPaths(int n) {
        if (n == 0) { // 1.1
            ArrayList<String> bres = new ArrayList<>();
            bres.add("");
            return bres;
        } else if (n < 0) {
            ArrayList<String> bres = new ArrayList<>(); // 1.2
            return bres;
        }

        ArrayList<String> path1 = getStairPaths(n - 1); // 2.1
        ArrayList<String> path2 = getStairPaths(n - 2); // 2.2
        ArrayList<String> path3 = getStairPaths(n - 3); // 2.3

        ArrayList<String> paths = new ArrayList<>(); // 3

        for (String path : path1) {
            paths.add("1" + path); // 4.1
        }
        for (String path : path2) {
            paths.add("2" + path); // 4.2
        }
        for (String path : path3) {
            paths.add("3" + path); // 4.3
        }
        return paths; // 5

    }
}

// Time Complexity :
// O(3**n)

// This time complexity is exponential because for each state, 3 recursion calls are made.

// SPACE COMPLEXITY :
// O(1)

// As no extra space is required, therefore space complexity is constant. However, if we include the space used in the recursive stack then the space complexity is O(n).

//RQ - https://leetcode.com/problems/climbing-stairs/description/ - recursion + memo

//-----------------------------------------------------------------------------------------------------------------------------------------------------

//Get Maze Paths

// We are given dimensions of a 2D maze as n and m which represent the rows and columns of the grid respectively.
// We are standing at the top left ( i.e. [1,1] cell ) of this maze.
// We have to reach the bottom right corner ( i.e. [n, m] cell ) of this maze.
// We have to print all the paths to reach from the start point to the end point such that we move 1 step in the horizontal or vertical direction at a time.

//I/P - 3*3 
//o/p - [hhvv, hvhv, hvvh, vhhv, vhvh, vvhh]

import java.io.*;

import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        Scanner scn = new Scanner(System.in);
        int n = 3;
        int m = 3;
        ArrayList<String> paths = getMazePaths(1, 1, n, m);
        System.out.println(paths);
    }

    // sr - source row
    // sc - source column
    // dr - destination row
    // dc - destination column
    public static ArrayList<String> getMazePaths(int sr, int sc, int dr, int dc) {
        if (sr == dr && sc == dc) { // 1
            ArrayList<String> bres = new ArrayList<>();
            bres.add("");
            return bres;
        }

        ArrayList<String> hpaths = new ArrayList<>(); // 2.1
        ArrayList<String> vpaths = new ArrayList<>(); // 2.2

        if (sc < dc) {
            hpaths = getMazePaths(sr, sc + 1, dr, dc); // 3.1
        }
        if (sr < dr) {
            vpaths = getMazePaths(sr + 1, sc, dr, dc); // 3.2
        }

        ArrayList<String> paths = new ArrayList<>(); // 4

        for (String hpath : hpaths) {
            paths.add("h" + hpath); // 5.1
        }

        for (String vpath : vpaths) {
            paths.add("v" + vpath); // 5.2
        }
        return paths; // 6
    }

}

// Time Complexity :
// O(2**n)

// This time complexity is exponential because for each state, 2 recursion calls are made.

// SPACE COMPLEXITY :
// O(1)

// As no extra space is required, therefore space complexity is constant. However, if we include the space used in the recursive stack then the space complexity is O(n).

//-----------------------------------------------------------------------------------------------------------------------------------------------------

//Get Maze Path With Jumps

//We will be given an nxm matrix as in  we are given a 5x4 matrix. We are initially at starting position M[1][1]. We have to reach the final position i.e. M[5][4]. For doing that we can take three types of steps

// Vertical Steps:
// We can move down in the column by any number of steps that we want to. For instance, from M[1][1] we may move just a single step to M[2][1] or we may move 2 steps and go directly to M[3][1] or in fact, we may directly move from M[1][1] to M[5][1].

// Horizontal Steps:
// We can move in the forward direction within the same row and we may move by as many steps as we want. For instance, from M[1][1] we may move one step to M[1][2] or two steps to M[1][3] or we may directly jump from M[1][1] to M[1][4].

// Diagonal Steps:
// We can also move along the diagonal and we may take as many steps as we want to. For instance, from M[1][1], we may move to M[2][2] or M[3][3] or even directly to M[4][4].

import java.util.*;

public class Main {

  public static void main(String[] args) throws Exception {
    Scanner scn = new Scanner(System.in);
    int n = 2;
    int m = 3;

    ArrayList<String> paths = getMazePaths(1, 1, n, m);
    System.out.println(paths);

  }

  public static ArrayList<String> getMazePaths(int sr, int sc, int dr, int dc) {
    if (sr == dr && sc == dc) {
      ArrayList<String> bres = new ArrayList<>();
      bres.add("");
      return bres;
    }

    ArrayList<String> paths = new ArrayList<>();

    // hms - horizontal move size
    for (int hms = 1; hms <= dc - sc; hms++) {
      ArrayList<String> hpaths = getMazePaths(sr, sc + hms, dr, dc);
      for (String hpath : hpaths) {
        paths.add("h" + hms + hpath);
      }
    }
    for (int vms = 1; vms <= dr - sr; vms++) {
      ArrayList<String> vpaths = getMazePaths(sr + vms, sc, dr, dc);
      for (String vpath : vpaths) {
        paths.add("v" + vms + vpath);
      }
    }
    for (int dms = 1; dms <= dr - sr && dms <= dc - sc; dms++) {
      ArrayList<String> dpaths = getMazePaths(sr + dms, sc + dms, dr, dc);
      for (String dpath : dpaths) {
        paths.add("d" + dms + dpath);
      }
    }
    return paths;
  }
}

//Time Complexity :
//Since we have assumed that the number of rows is the largest and traversal in columns 
//depends upon the number of rows so they will be responsible for the overall time complexity the maximum.
// time complexity is: O(3**n+m)

// SPACE COMPLEXITY :
// The space complexity cannot be defined when space is increasing continuously 
//(as the Arraylist size keeps on increasing with new paths being added). 

//In these situations, the space complexity is approx the same as time complexity. 
//Remember, the space complexity is only valid if we have used any extra memory or data structure. 
//We used Arraylist because we were asked to store the paths in the question. 
//So, we have not used any extra data structure. So, the space complexity will be O(1).

