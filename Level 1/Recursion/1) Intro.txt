// Sample Input
// 5

// Sample Output
// 5
// 4
// 3
// 2
// 1


// Time Complexity: O(n)
// As n calls are made and work is done corresponding to these n calls therefore the time complexity becomes O(n).

// Space Complexity: O(1)
// Since no extra space is used, therefore space complexity is constant, however you should know that if the recursion call stack is taken into account, then space complexity will be O(n) as there are n recursive calls.

import java.io.*;

import java.util.*;

public class Main {

  public static void main(String[] args) throws Exception {
    printDecreasing(5);
  }

  public static void printDecreasing(int n) {
    //Base case
    if (n == 0)
      return;

    //Self Work
    System.out.println(n);

    //Recursive call
    printDecreasing(n - 1);
  }
}

//-----------------------------------------------------------------------------------------------------------------------------------------

// Print Increasing

// Sample Input
// 5

// Sample Output
// 1
// 2
// 3
// 4
// 5

// O(n)

// As n calls are made and work is done corresponding to these n calls therefore the time complexity becomes O(n).

// SPACE COMPLEXITY :
// O(1)

import java.io.*;
import java.util.*;

public class Main {

  public static void main(String[] args) throws Exception {
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    int n = Integer.parseInt(br.readLine()); //5
    printIncreasing(n);
  }

  public static void printIncreasing(int n) {
    if(n == 0){
      return;
    }
    
    printIncreasing(n - 1);
    System.out.println(n);
  }
}

//-----------------------------------------------------------------------------------------------------------------------------------------

// Print Increasing Decreasing

// Sample Input
// 3

// Sample Output
// 3
// 2
// 1
// 1
// 2
// 3


public class Main {

    public static void main(String[] args) throws Exception {
      pdi(3);
    }
  
    public static void pdi(int n) {
  
      if (n == 0) { // 1
        return;
      }
      System.out.println(n); // 2
      pdi(n - 1); // 3
      System.out.println(n); // 4
    }
  
  }

//-----------------------------------------------------------------------------------------------------------------------------------------

// Factorial
// Sample Input
// 5

// Sample Output
// 120


// Time Complexity :
// O(n)

// This time complexity is linear because a recursion call is made.

// SPACE COMPLEXITY :
// O(1)

import java.io.*;

import java.util.*;

public class Main {

  public static void main(String[] args) throws Exception {
    int f = factorial(5);
    System.out.println(f);
  }

  public static int factorial(int n) {
    if (n == 1) { // 1
      return 1;
    }

    int fnm1 = factorial(n - 1); // 2
    int fn = n * fnm1; // 3
    return fn; // 4
  }
}

//-----------------------------------------------------------------------------------------------------------------------------------------

//Power-linear

// Sample Input
// 2
// 5

// Sample Output
// 32

import java.io.*;

public class Main {

  public static void main(String[] args) throws Exception {
    BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
    int x = Integer.parseInt(br.readLine()); //2
    int n = Integer.parseInt(br.readLine()); //5
    int p = power(x, n);
    System.out.println(p);
  }

  public static int power(int x, int n) {
    if (n == 0) {
      return 1;
    }
    int xpnm1 = power(x, n - 1);
    int xpn = xpnm1 * x;
    return xpn;
  }
}

// Time Complexity :
// O(n)

// Since you are recursively calling for a subproblem with n-1 from n, hence n + 1 recursive calls will be made (+ 1 when it hits the base case n = 0). 
// You can also count the number of recursive calls in the call stack. So the time complexity turns out to be O(n) (which is independent of the value of x).

// SPACE COMPLEXITY :
// O(1)

// There is no data structure used, thus no auxiliary space is used. Hence, space complexity is O(1).

// Note: There are n recursive calls that do take stack space, but we do not account for this space as we are only concerned with space used by data structures defined by us.

// However, if it is mentioned to give the space complexity which takes into account the space taken by recursion call stack also, then, since there are n recursive calls, hence O(n) space will be required.


// Power - Logarithmic

import java.io.*;

public class Main {

  public static void main(String[] args) throws Exception {
    int x = 2;
    int n = 5;
    int p = power(x, n);
    System.out.println(p);
  }

  public static int power(int x, int n) {
    if (n == 0) {
      return 1;
    }
    int xpnb2 = power(x, n / 2);
    // n/2 will automatically get floor value
    // since it is type casted to int.

    int xpn = xpnb2 * xpnb2;

    if (n % 2 == 1) {
      xpn = xpn * x;
    }

    return xpn;
  }
}

//tc - log(n)
// sc- O(1)

//-----------------------------------------------------------------------------------------------------------------------------------------

//Print Zigzag

// 1. Here are a few sets of inputs and outputs for your reference
// Input1 -> 1
// Output1 -> 1 1 1

// Input2 -> 2
// Output2 -> 2 1 1 1 2 1 1 1 2

// Input2 -> 3
// Output3 -> 3 2 1 1 1 2 1 1 1 2 3 2 1 1 1 2 1 1 1 2 3

public class Main {
  public static void main(String[] args) throws Exception {
    int n = 3;
    pzz(n);
  }

  public static void pzz(int n) {
    if (n == 0)
      return;
    System.out.print(n + " ");
    pzz(n - 1);
    System.out.print(n + " ");
    pzz(n - 1);
    System.out.print(n + " ");
  }
}
//tc - O(n)
//sc- O(1)

//-----------------------------------------------------------------------------------------------------------------------------------------

// https://www.geeksforgeeks.org/c-program-for-tower-of-hanoi/

// Tower of Hanoi is a mathematical puzzle where we have three rods (A, B, and C) and N disks.
// Initially, all the disks are stacked in decreasing value of diameter i.e., the smallest disk is placed on the top and they are on rod A.
// The objective of the puzzle is to move the entire stack to another rod (here considered C), obeying the following simple rules: 

// Only one disk can be moved at a time.
// Each move consists of taking the upper disk from one of the stacks and placing it on top of another stack i.e.
// a disk can only be moved if it is the uppermost disk on a stack.
// No disk may be placed on top of a smaller disk.

class GFG {
  static void towerOfHanoi(int n, char from_rod, char to_rod, char aux_rod) {
    if (n == 0) {
      return;
    }
    towerOfHanoi(n - 1, from_rod, aux_rod, to_rod);
    System.out.println("Move disk " + n + " from rod "
        + from_rod + " to rod "
        + to_rod);
    towerOfHanoi(n - 1, aux_rod, to_rod, from_rod);
  }

  // Driver code
  public static void main(String args[]) {
    int N = 3;

    // A, B and C are names of rods
    towerOfHanoi(N, 'A', 'C', 'B');
  }
}

// Time complexity: O(2**N), There are two possibilities for every disk. Therefore, 2 * 2 * 2 * . . . * 2(N times) is 2N
// Auxiliary Space: O(N), Function call stack space

