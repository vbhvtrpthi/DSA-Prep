// Include/exclude style
//print-subsequence-official

// Sample Input
// abc
 
// Sample Output
// , c, b, bc, a, ac, ab, abc

// let's discuss why there is even a need for a second approach?

// it wasn"t an optimized solution. Let's discuss HOW.
// for n = 3, 2**3 items are possible, out of those items total pairs possible are,  2**3 / 2 = 2**2, 
// As 3 chars are there in each pairs, so total no of chars possible = 2**2 * 3 = 12 chars

// for n -> 2**n-1 * n chars will be stored in arraylist
// for n = 31, total 31gb will be required to store in arraylist.

import java.util.*;

public class Test {

    public static void main(String[] args) throws Exception {
        Scanner scn = new Scanner(System.in);
        String str = "abc";
        printSS(str, "");
        scn.close();
    }

    public static void printSS(String str, String ans) {

        if (str.length() == 0) {
            System.out.print(ans + " ");
            return;
        }

        char ch = str.charAt(0);
        String ros = str.substring(1);

        printSS(ros, ans + ch);
        printSS(ros, ans);
    }
}

//Tc - O(2**n) This time complexity is exponential because for each state, 2 recursion calls are made.
// SC- O(1) As no extra space is required, therefore space complexity is constant. However, if we include the space used in the recursive stack then the space complexity is O(n).

//-----------------------------------------------------------------------------------------------------------------------------------------

//PRINT KPC

//I/p - 578
// o.p [mtv, mtw, mtx, muv, muw, mux, ntv, ntw, ntx, nuv, nuw, nux, otv, otw, otx, ouv, ouw, oux]

import java.util.*;

public class Main {

    static String[] codes = { ".;", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tu", "vwx",
            "yz"
    };

    public static void main(String[] args) throws Exception {
        Scanner scn = new Scanner(System.in);
        String str = "573";
        printKPC(str, "");
        scn.close();
    }

    public static void printKPC(String str, String ans) {

        if (str.length() == 0) {
            System.out.print(ans + " ");
            return;
        }

        char ch = str.charAt(0);
        String ros = str.substring(1);
        String codeForch = codes[ch - '0'];
        
        // cho - character option
        for(int i = 0; i < codeForch.length(); i++){
           char cho = codeForch.charAt(i);
           printKPC(ros, ans + cho);
        }
    }
}

// Time Complexity :
// O(2**n)

// This time complexity is exponential.

// SPACE COMPLEXITY :
// O(1)

// As no extra space is required, therefore space complexity is constant. However, if we include the space used in the recursive stack then the space complexity is O(n).

//-----------------------------------------------------------------------------------------------------------------------------------------

//print_stairs_paths


import java.io.*;

import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        Scanner scn = new Scanner(System.in);
        int t = scn.nextInt();
        printStairPaths(3, "");
    }

    public static void printStairPaths(int n, String psf) {
        if (n <= 0) {
            if (n == 0) {
                System.out.println(psf);
            }

            return;
        }

        printStairPaths(n - 1, psf + 1);
        printStairPaths(n - 2, psf + 2);
        printStairPaths(n - 3, psf + 3);
    }
}

// O(3^n)

// The time complexity of the above solution is exponential.
// From each state, 3 recursive functions are called. So time complexity is O(3^n).

// SPACE COMPLEXITY :
// O(1)

// And as no extra space is required, space complexity is constant. However, if we consider the space taken by the recursion call stack, then space complexity will be O(n) as the maximum depth of the recursion stack at any point can be equal to the length of the numeric string.

//-----------------------------------------------------------------------------------------------------------------------------------------

//Print Maze Path
// We are given dimensions of a 2D maze as n and m which represent the rows and columns of the grid respectively.
// We are standing at the top left ( i.e. [0,0] cell ) of this maze.
// We have to reach the bottom right corner ( i.e. [n - 1, m - 1] cell ) of this maze.
// We have to print all the paths to reach from the start point to the end point such that we move 1 step in the horizontal or vertical direction at a time.

//I/P - 3*3 
//o/p - [hhvv, hvhv, hvvh, vhhv, vhvh, vvhh]

import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        Scanner scn = new Scanner(System.in);
        int n = 2;
        int m = 3;
        printMazePaths(0, 0, n - 1, m - 1, "");
        scn.close();

    }

    public static void printMazePaths(int sr, int sc, int dr, int dc, String psf) {
        if (sr == dr && sc == dc) {
            System.out.print(psf + " ");
            return;
        }

        if (sc < dc)
            printMazePaths(sr, sc + 1, dr, dc, psf + 'h');
        if (sr < dr) {
            printMazePaths(sr + 1, sc, dr, dc, psf + 'v');

        }
    }
}

// Time Complexity :
// O(2^n)

// The time complexity of this procedure is O(2^n*m) where n is the number of rows and m is the number of columns in the matrix.

// SPACE COMPLEXITY :
// O(1)

// The space complexity of this procedure is O(1) since we have not used any extra memory or any extra data structure.

//-----------------------------------------------------------------------------------------------------------------------------------------

// print-maze-path-with-jumps-official

import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        Scanner scn = new Scanner(System.in);
        int n = 2;
        int m = 3;
        printMazePathsWithJumps(0, 0, n - 1, m - 1, "");
        scn.close();
    }

    public static void printMazePathsWithJumps(int sr, int sc, int dr, int dc, String psf) {
        if (sr == dr && sc == dc) {
            System.out.print(psf + " ");
            return;
        }

        for (int hms = 1; hms <= dc - sc; hms++) {
            printMazePathsWithJumps(sr, sc + 1, dr, dc, psf + 'h' + hms);
        }

        for (int vms = 1; vms <= dr - sr; vms++) {
            printMazePathsWithJumps(sr + 1, sc, dr, dc, psf + 'v' + vms);
        }

        for (int dms = 1; dms <= dc - sc && dms <= dr - sr; dms++) {
            printMazePathsWithJumps(sr + 1, sc + 1, dr, dc, psf + 'd' + dms);
        }
    }
}


// Time Complexity :  O(3**n+m)

// The time complexity of this procedure is O(3m+n) where n is the number of rows and m is the number of columns in the matrix.
//  We have discussed the derivation of this complexity in GET MAZE PATHS WITH JUMPS ARTICLE.

// SPACE COMPLEXITY :
// The space complexity of this procedure is O(1) since we have not used any extra memory or any extra data structure.

//-----------------------------------------------------------------------------------------------------------------------------------------

//Print Permutations

// for length n -> n!
// Input: S = “ABC”
// Output: “ABC”, “ACB”, “BAC”, “BCA”, “CBA”, “CAB”

import java.io.*;

import java.util.*;

public class Test {

    public static void main(String[] args) throws Exception {

        Scanner scn = new Scanner(System.in);
        String str = "abc";

        printPermutations(str, "");

    }

    public static void printPermutations(String str, String asf) {

        if (str.length() == 0) {
            System.out.println(asf); // Question string is empty so print the answer now and return
            return;
        }
        // Extracting each character at a time from the question string and appending it
        // to answer so far
        for (int i = 0; i < str.length(); i++) {
            char ch = str.charAt(i);
            String leftPart = str.substring(0, i); // Substring from 0 to i-1 (left to ch)
            String rightPart = str.substring(i + 1); // Substring from i+1 till end of String (right to ch)
            String roq = leftPart + rightPart; // Remaining string after extracting ch
            printPermutations(roq, asf + ch);
        }

    }
}

// for complexity analysis see pepcoding article
// tc O(n!)
// sc O(1)

//RQ- https://practice.geeksforgeeks.org/problems/permutations-of-a-given-string2041/1?utm_source=gfg&utm_medium=article&utm_campaign=bottom_sticky_on_article

//-----------------------------------------------------------------------------------------------------------------------------------------
//Print Encodings

//2. You are required to encode the str as per following rules
// 1 -> a
// 2 -> b
// 3 -> c
// ..
// 25 -> y
// 26 -> z

// 3. Complete the body of printEncodings function - without changing signature - to calculate and print all encodings of str.
// Use the input-output below to get more understanding on what is required
// 123 -> abc, aw, lc
// 993 -> iic
// 013 -> Invalid input. A string starting with 0 will not be passed.
// 103 -> jc
// 303 -> No output possible. But such a string maybe passed. In this case print nothing.

// Convert char to integer -> '6' - '0' = 6
// Convert Integer to char -> ex 3 -> C, 'a' + 3 - 1 = 'C'

import java.io.*;

import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String str = br.readLine();
        printEncodings(str, "");
    }

    public static void printEncodings(String ques, String ans) {
        if (ques.length() == 0) {

            System.out.println(ans);
            return;

        } else if (ques.length() == 1) {
            
            if (ques.charAt(0) == '0') {
                return;
            } else {
                String ch0 = ques.substring(0, 1);
                String roq0 = ques.substring(1);
                String code0 = (char) ('a' +
                        (Integer.parseInt(ch0) - 1)) + "";
                printEncodings(roq0, ans + code0);
            }
        } else {
            if (ques.charAt(0) == '0') {
                return;
            } else {

                String ch0 = ques.substring(0, 1);
                String roq0 = ques.substring(1);
                String code0 = (char) ('a' + (Integer.parseInt(ch0) - 1)) + "";
                printEncodings(roq0, ans + code0);

                String ch01 = ques.substring(0, 2);
                String roq01 = ques.substring(2);
                String code01 = (char) ('a' + (Integer.parseInt(ch01) - 1)) + "";

                if (Integer.parseInt(ch01) <= 26) {
                    printEncodings(roq01, ans + code01);
                }

            }
        }
    }
}

// Time Complexity :
// We can make atmax 2 decisions (1-length number or 2-length number), hence the time complexity will be O(2**n) (exponential in nature).

// SPACE COMPLEXITY :
// If we consider the space taken by the recursion call stack, then space complexity will be O(n) as 
// the maximum depth of the recursion stack at any point can be equal to the length of the numeric string.