//Display array

public class Main {

    public static void main(String[] args) throws Exception {
     int[] arr = new int[]{20,30,40,50};
      displayArr(arr, 0);
  
    }
  
    public static void displayArr(int[] arr, int idx) {
      if (idx == arr.length) return;
  
      System.out.println(arr[idx]);
      displayArr(arr, idx + 1);
    }
  }

// Time Complexity :
// O(n)

// Let"s try to understand our time complexity.
// Since we are making at most n recursion calls and in each call we are performing O(1) operations
// (printing a data is constant time) so our overall time complexity is n*O(1) = O(n).

// SPACE COMPLEXITY :
// O(n)

// Also, we know for each recursion call the parameters, address of the array are stored in the runtime stack, 
//and since the recursive call stack is of n length it will also take n space in the stack. 
//Although we are not using any array the space complexity will be O(n).


//-----------------------------------------------------------------------------------------------------------------------------------------

//display_array_in_reverse

public class Main {

    public static void main(String[] args) throws Exception {
     int[] arr = new int[]{20,30,40,50};
      displayArr(arr, 0);
    }
  
    public static void displayArr(int[] arr, int idx) {
      if (idx == arr.length) return;
      displayArr(arr, idx + 1);
      System.out.println(arr[idx]);
    }
  }

  //tc - O(n), SC - O(n)

//-----------------------------------------------------------------------------------------------------------------------------------------

// Max of an Array


public class Main {

  public static void main(String[] args) throws Exception {

      int[] a = new int[]{10,13,9,45,2};
      int max = maxOfArray(a, 0);
      System.out.println(max);

  }

  public static int maxOfArray(int[] arr, int idx) {

      if (idx >= arr.length) {
          return Integer.MIN_VALUE; // we have the constraint that the size of array will not be zero hence we have
                                    // not considered that case here
      }

      int misa = maxOfArray(arr, idx + 1); // misa stands for maximum in smaller array

      if (arr[idx] > misa) {
          return arr[idx];
      }
      return misa;

  }

}

// Time Complexity :
// The time complexity of the above solution is O(n). This is because we have iterated the array twice. Once while going into the recursion and the other time while coming out of it. So, n elements were visited twice: n+n= 2n, O(2n)=O(n).

// SPACE COMPLEXITY :
// The space complexity will be O(1) as we have not used any extra space.

//-----------------------------------------------------------------------------------------------------------------------------------------

//first-index-official


public class Main {

  public static void main(String[] args) throws Exception {
      int[] arr = new int[]{1, 3, 5, 5, 5, 5, 67, 123, 125};

      int fi = firstIndex(arr, 0, 5);
      System.out.println(fi);
  }

  public static int firstIndex(int[] arr, int idx, int x) {

      if (idx == arr.length) {
          return -1;
      }

      if (arr[idx] == x) {
          return idx;
      }

      int fiisa = firstIndex(arr, idx + 1, x);

      return fiisa;
  }

}
//tc - O(N)
//sc - O(1)

//-----------------------------------------------------------------------------------------------------------------------------------------

// last_index

public class Main {

  public static void main(String[] args) throws Exception {

    int[] arr = new int[] { 1, 3, 5, 5, 5, 5, 67, 123, 125 };
    int ans = LastIndexOccurence(arr, 0, 5);
    System.out.println(ans);
  }

  public static int LastIndexOccurence(int[] arr, int idx, int value) {
    if (idx == arr.length - 1) {
      if (arr[idx] == value) {
        return idx;
      } else {
        return -1;
      }
    }

    int liisa = LastIndexOccurence(arr, idx + 1, value);

    if(liisa == -1 && arr[idx] == value)
      return idx;

    return liisa;
  }
}

// Time Complexity :
// O(n)

// As n (array"s length) calls are made and work is done corresponding to these n calls therefore the time complexity becomes O(n).

// SPACE COMPLEXITY :
// O(1)

//-----------------------------------------------------------------------------------------------------------------------------------------

// all-indices-official

// Required to return an array with all the indices at which x occurs in an array.
// For example:
// Input: arr = {5, 3, 2, 3, 9, 7}, X = 3
// Output: {1, 3}


import java.util.Arrays;

public class Main {

    public static void main(String[] args) throws Exception {

        int[] arr = new int[] { 1, 3, 5, 5, 9, 5, 67, 123, 5 };
        int[] ans = allIndices(arr, 5, 0, 0);
        Arrays.stream(ans).forEach(System.out::print); //printing 1d array in a line
    }

    //main problem is to know the size of the array in which we will store all indices of x. That's when the integer fsf (found so far) comes into use.
    public static int[] allIndices(int[] arr, int x, int idx, int fsf) {
        if (idx == arr.length) {
            return new int[fsf];
        }

        int[] iarr;

        if (arr[idx] == x) {
            iarr = allIndices(arr, x, idx + 1, fsf + 1);
            iarr[fsf] = idx;
        } else {
            iarr = allIndices(arr, x, idx + 1, fsf);
        }

        return iarr;
    }
}

//tc - 0(n) sc - O(1)
