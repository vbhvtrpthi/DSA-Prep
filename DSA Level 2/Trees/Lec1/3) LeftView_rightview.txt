//https://practice.geeksforgeeks.org/problems/left-view-of-binary-tree/1

 ArrayList<Integer> leftView(Node root)
    {
      ArrayList<Integer> retVal = new ArrayList<>();
      
      if(root == null){
          return retVal;
      }

      Queue<Node> queue = new LinkedList<>();
      queue.add(root);

      while(queue.size() > 0){
          int lsize = queue.size();//level size

          for(int i = 0; i < lsize; i++){
              Node temp = queue.remove();

              if(i == 0){
                  retVal.add(temp.data);
              }

              if(temp.left != null){
                  queue.add(temp.left);
              }

              if(temp.right != null){
                  queue.add(temp.right);
              }
          }
      }
     
      
      return retVal;
    }


//https://leetcode.com/problems/binary-tree-right-side-view/submissions/
// Same code as left view

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {

    public List<Integer> rightSideView(TreeNode root) {
        List<Integer> retVal = new ArrayList<>();

        if (root == null) {
            return retVal;
        }

        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);

        while (queue.size() > 0) {
            int lsize = queue.size(); //level size

            for (int i = 0; i < lsize; i++) {
                TreeNode temp = queue.remove();

                if (i == lsize - 1) { //only change here
                    retVal.add(temp.val);
                }

                if (temp.left != null) {
                    queue.add(temp.left);
                }

                if (temp.right != null) {
                    queue.add(temp.right);
                }
            }
        }

        return retVal;
    }
}


//https://leetcode.com/problems/find-bottom-left-tree-value/
//Just print left view's last value

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int findBottomLeftValue(TreeNode root) {
       int res = 0;
      
      if(root == null){
          return -1;
      }

      Queue<TreeNode> queue = new LinkedList<>();
      queue.add(root);

      while(queue.size() > 0){
          int lsize = queue.size();//level size

          for(int i = 0; i < lsize; i++){
              TreeNode temp = queue.remove();

              if(i == 0) res = temp.val;

              if(temp.left != null){
                  queue.add(temp.left);
              }

              if(temp.right != null){
                  queue.add(temp.right);
              }
          }
      }
     
      
      return res;
    }
}