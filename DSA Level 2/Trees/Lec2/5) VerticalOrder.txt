//https://leetcode.com/problems/vertical-order-traversal-of-a-binary-tree/submissions/

class Solution {

    class Pair implements Comparable<Pair> {
        TreeNode node;
        int h; //horizontal
        int v; //vetical

        Pair(TreeNode node, int h, int v) {
            this.node = node;
            this.h = h;
            this.v = v;
        }
        
        //this - other -> increasing
        //other - this -> decreasing
        public int compareTo(Pair other) {
            //if same vertical sort on the basis of value else sort on the basis of vertical value
            if (this.v == other.v) {
                return this.node.val - other.node.val;
            } else {
                return this.v - other.v;
            }
        }
    }

    public List<List<Integer>> verticalTraversal(TreeNode root) {
        Queue<Pair> q = new LinkedList<>();
        q.add(new Pair(root, 0, 1));

        //for sorting from left to right
        int lmh = 0; //left most horizontal
        int rmh = 0; //right most horizontal

        HashMap<Integer, PriorityQueue<Pair>> map = new HashMap<>();

        while (q.size() > 0) {
            Pair temp = q.remove();

            if (temp.h < lmh) lmh = temp.h;

            if (temp.h > rmh) rmh = temp.h;

            if (map.containsKey(temp.h) == false) {
                map.put(temp.h, new PriorityQueue<>());
                map.get(temp.h).add(temp);
            } else {
                map.get(temp.h).add(temp);
            }

            if (temp.node.left != null) {
                q.add(new Pair(temp.node.left, temp.h - 1, temp.v + 1));
            }

            if (temp.node.right != null) {
                q.add(new Pair(temp.node.right, temp.h + 1, temp.v + 1));
            }
        }

        List<List<Integer>> res = new ArrayList<>();
        for (int i = lmh; i <= rmh; i++) {
            List<Integer> list = new ArrayList<>();
            PriorityQueue<Pair> pq = map.get(i);

            while (pq.size() > 0) {
                Pair temp = pq.remove();
                list.add(temp.node.val);
            }

            res.add(list);
        }
        return res;
    }
}
