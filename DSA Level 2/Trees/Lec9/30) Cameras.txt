//https://leetcode.com/problems/binary-tree-cameras/
//Binary Tree Camera 0 -> camera, 1-> covered, -1-> need camera

//tc O(n) sc O(n)
class Solution {
    int cameras = 0;

    public int minCameraCover(TreeNode root) {
        if (minCameraCoverHelper(root) == -1) cameras++;
        return cameras;
    }

    public int minCameraCoverHelper(TreeNode root) {
        if (root == null) return 1;

        int lc = minCameraCoverHelper(root.left);
        int rc = minCameraCoverHelper(root.right);

        if (lc == -1 || rc == -1) {
            cameras++;
            return 0;
        }

        if (lc == 0 || rc == 0) return 1;

        return -1;
    }
}
